name: Production CICD Workflow

on:
  pull_request_target:
    branches: [ main ]

jobs:
  approve: # First step
    runs-on: ubuntu-latest
    steps:
      - name: Approve
        run: echo For security reasons, all pull requests need to be approved first before running any automated CI.
  
  run-shell-command: # Second step
    runs-on: ubuntu-latest
    needs: [approve] # Require the first step to finish
    environment:
      name: Integrate Pull Request # Our dummy environment
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: echo a string 
        run: echo "Hello World"
      - name: multiline script 
        run: |
          node -v 
          npm -v
      - name: python Command
        run: |
          import platform
          print(platform.processor())
        shell: python
  run-window-command:
    runs-on: windows-latest
    needs: ["run-shell-command"]
    steps:
      - name: Directory Powershell
        run: Get-Location
      - name: Directory Bash
        run: pwd
        shell: bash

  post-deploy:
    runs-on: ubuntu-latest
    needs: ["run-shell-command"]
    name: Post Deploy
    steps:
      - uses: actions/checkout@v2
      - name: Post Deploy
      - uses: actions/setup-node@v2
        with: 
          node-version: 17
      - run: sudo apt install curl
      - run: curl -Is http://www.google.com | head -n 1

  # notify-on-email:
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: [post-deploy, run-shell-command, run-window-command]
  #   name: EmailNotifier
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Send Mail

  # notify-on-slack:
  #   name: Slack Notification
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: [post-deploy, run-shell-command, run-window-command]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Slack Notification
        # uses: rtCamp/action-slack-notify@v2
        # env:
        #   SLACK_CHANNEL:
        #   SLACK_WEBHOOK:
        #   SLACK_MESSAGE: 1)post-deploy -> ${{needs.post-deploy.result}} 2)run-shell-command -> ${{needs.run-shell-command.result}} 3)run-window-command -> ${{needs.run-window-command.result}}

